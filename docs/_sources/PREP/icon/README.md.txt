ICON
========

The program ICON prepares chemical initial conditions (ICs) for the CMAQ
Chemistry Transport Model (CCTM). ICON will generate an output file with
chemical concentrations for all grid cells in the modeling domain.  Depending on
user specified options and/or input datasets, the ICs generated by ICON can be
time dependent, time independent, and either spatially uniform or variable
across the modeling domain. If deriving ICs from the ASCII vertical profiles,
ICON creates spatially uniform, time independent ICs. From concentration (CONC)
files, ICON extracts spatially varying ICs, either on the same grid cell
resolution (windowed modeling domain), or for a finer grid resolution modeling
domain (nested modeling domain). ICs generated from CONC files are time
dependent if the input CONC file is time stepped, or time independent if the
CONC file time step is zero.

There are two distinct modes of operation for ICON.  When running ICON, the
user must specify whether to generate ICs from:  (1) an existing CONC file
(*regrid*); or (2) an ASCII file of vertical profiles (*profile*).

The User's Guide contains a [tutorial on how to use ICON to create initial conditions from seasonal or daily average hemispheric CMAQ output files](../../DOCS/Users_Guide/Tutorials/CMAQ_UG_tutorial_HCMAQ_IC_BC.md) distributed through the CMAS data warehouse.

CMAQ can also use initial conditions derived from global chemistry models
(GCMs). While ICON does not directly support processing of datasets from GCMs
(in their native formats), users could develop their own custom codes to
transform their GCM datasets into I/O API format, which would then allow these
datasets to be input into ICON to generate ICs for the CCTM.

## Environment variables used:

**Table 1. Runtime Environment Variables**

|**Variable Name**|**Example in Runscript**|**Description**|
|---------------------|-------------|-----------------------------------------------------------------------|
|VRSN|v53|Identifies version for the ICON run. Its value should be consistent between BCON build and run scripts for an individual application.|
|APPL|SE53BENCH|Identifies the intent of the ICON run such as the model domain and chemical mechanism used. Value is the user's preference.|
|ICTYPE|regrid, profile|Specifies which IC type to generate.|
|EXEC|ICON_${VRSN}.exe|Executable to use for the ICON run.|
|GRIDDESC|$CMAQ_HOME/scripts/GRIDDESC1|Grid description file for setting the horizontal grid definition for the target domain.|
|GRID_NAME|SE53BENCH|Name of the grid definition contained in the GRIDDESC file that specifies the horizontal grid for the target domain.|
|OUTDIR|$CMAQ_HOME/data/icon|Output data directory|
|SDATE|0|Julian start date for extracting initial conditions from a CCTM CONC file. If SDATE is not set, it will be set automatically from the MET_CRO_3D_FIN file.|
|STIME|0|Start time for extracting initial conditions from a CCTM CONC file. If STIME is not set, it will be set automatically from the MET_CRO_3D_FIN file.|
|IOAPI_ISPH|20|I/O API setting for spheroid type. See I/O API documentation for [setsphere](https://www.cmascenter.org/ioapi/documentation/all_versions/html/SETSPHERE.html) for more information.|
|IOAPI_OFFSET_64|YES|I/O API setting for large time-step records. If your output time step is going to produce data that are >2GB per time step, then this needs to be set to YES.|

## ICON input files

**Table 2. ICON input files for ICTYPE equals "regrid"**

|**File Name**|**Format**|**Description**|
|---------------------|-------------|-----------------------------------------------------------------------|
|GRIDDESC|ASCII|Horizontal grid description file for defining the model grid; this file is output by MCIP or can be created by the user|
|CTM_CONC_1|IOAPI/GRDDED3|Name and location of the CMAQ concentration file from which to derive initial conditions; this file is output from CCTM|
|MET_CRO_3D_CRS|IOAPI/GRDDED3|Name and location of the coarse-grid MET_CRO_3D file that is required for creating the vertical grid structure if this structure changes between nested simulations; this file is output by MCIP|
|MET_CRO_3D_FIN|IOAPI/GRDDED3|Name and location of the fine grid MET_CRO_3D file that is required if the vertical grid structure changes between nested simulations; this file is output by MCIP|

**Table 3. ICON input files for ICTYPE equals "profile"**

|**File Name**|**Format**|**Description**|
|-------------|----------|---------------|
|GRIDDESC|ASCII|Horizontal grid description file for defining the model grid for the target domain; this file is output by MCIP or can be created by the user|
|IC_PROFILE|ASCII|Vertical chemical profiles from which to derive initial conditions; this file can created by the user|
|MET_CRO_3D_FIN|IOAPI/BNDARY3|Name and location of the fine-grid (or target modeling domain) MET_CRO_3D file|

## ICON output files

**Table 4. ICON output files**

|**File Name**|**Format**|**Description**|
|------------|-----------|---------------------------------------------------------------|
|INIT_CONC_1|IOAPI/GRDDED3|Name and location of the gridded initial conditions data output on the model grid defined by values of VRSN, ICTYPE, APPL, and DATE  |

The default location of the ICON output files is the `$CMAQ_DATA/icon` directory, controlled by the `OUTDIR` variable in the run script. The default naming convention for all ICON output files uses the `APPL` and `GRID_NAME` environment variables in the file name. For initial conditions created from existing `CCTM CONC` files, the Julian date is also used in the file name through the `DATE` environment variable. All of the file-naming variables for `ICON` outputs are set in the run script.

## Compile ICON source code

Execute the build script to compile ICON:

```
cd $CMAQ_HOME/PREP/icon/scripts
./bldit_icon.csh [compiler] [version] |& tee build_icon.log
```

## Run ICON

Set the run script settings according to the execution configuration variables
described above. Run ICON to produce initial conditions for the CCTM:

```
cd $CMAQ_HOME/PREP/icon/scripts
./run_icon.csh |& tee run_icon.log
```

Check the log file to ensure complete and correct execution without errors.


