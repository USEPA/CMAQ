#!/bin/csh -f

# ======================== CCTMv5.2 Build Script ======================= 
# Usage: bldit.cctm >&! bldit.cctm.log                                   
# Requirements: I/O API & netCDF libraries, a Fortran compiler,               
#               and MPI for multiprocessor computing                     
#
# To report problems or request help with this script/program:           
#             http://www.cmascenter.org
# ====================================================================== 

#> Source the config.cmaq file to set the build environment
 source ../../config.cmaq

 set echo

#:#:#:#:#:#:#:#:#:#:#:# Begin User Input Section #:#:#:#:#:#:#:#:#:#:#:#

#> Source Code Repository
 setenv REPOROOT $CMAQ_HOME/CCTM/src  #> location of the CCTM source code
 set GlobInc = $REPOROOT/ICL           #> location of the global include files
 set Mechs   = $REPOROOT/MECHS         #> location of the chemistry mechanism include files

#> Working directory and application IDs
 set Base  = $cwd                      #> working directory for compiling the source code
 set APPL  = v52b                      #> model configuration ID
 set EXEC  = CCTM_${APPL}_$EXEC_ID     #> executable name
 set CFG   = cfg.$EXEC                 #> configuration file name

#> Controls for managing the source code and MPI compilation
set CopySrc                            #> copy the source files into a working directory
#set MakeFileOnly                       #> uncomment to build a Makefile, but do not compile; comment out to compile the model (default if not set)
set ParOpt                             #> uncomment to build a multiple processor (MPI) executable; comment out for a single processor (serial) executable
#set build_parallel_io                 #> uncomment to build with parallel I/O (pnetcdf); comment out to use standard netCDF I/O

#> Two-way WRF-CMAQ 
#set build_twoway                      #> uncomment to build WRF-CMAQ twoway; comment out for off-line chemistry 

#> Potential vorticity free-troposphere O3 scaling
#set potvortO3

#======================================#>
#> CCTM Science Modules
#======================================#>
#> NOTE: For the modules with multiple options, a note is provided on where to look in the CCTM
#>   source code archive for a list of the possible settings; users may also refer to the CMAQ documentation

 set ModDriver = driver/wrf            #> generalized coordinate driver module (see $CMAQ_HOME/CCTM/src/driver)
 set ModInit   = init/yamo             #> time-step initialization module 
 set ModGrid   = grid/cartesian        #> grid configuration module 
 set ModCpl    = couple/gencoor_wrf    #> unit conversion and concentration coupling module (see $CMAQ_HOME/CCTM/src/couple)
 set ModHadv   = hadv/yamo             #> horizontal advection module
 set ModVadv   = vadv/wrf              #> vertical advection module (see $CMAQ_HOME/CCTM/src/vadv)
 set ModHdiff  = hdiff/multiscale      #> horizontal diffusion module
 set ModVdiff  = vdiff/acm2            #> vertical diffusion module (see $CMAQ_HOME/CCTM/src/vdiff)
 set ModDepv   = depv/m3dry            #> deposition velocity calculation module (see $CMAQ_HOME/CCTM/src/depv)
 set ModEmis   = emis/emis             #> in-line emissions module
 set ModBiog   = biog/beis3            #> BEIS3 in-line emissions module 
 set ModPlmrs  = plrise/smoke          #> in-line emissions plume rise
 set ModCgrds  = spcs/cgrid_spcs_nml   #> chemistry species configuration module (see $CMAQ_HOME/CCTM/src/spcs)
 set ModPhot   = phot/inline           #> photolysis calculation module (see $CMAQ_HOME/CCTM/src/phot)
 set Mechanism = cb05e51_ae6_aq        #> chemical mechanism (see $CMAQ_HOME/CCTM/src/MECHS)
 set ModGas    = gas/ebi_${Mechanism}  #> gas-phase chemistry solver (see $CMAQ_HOME/CCTM/src/gas)
 set ModAero   = aero/aero6            #> aerosol chemistry module (see $CMAQ_HOME/CCTM/src/aero)
 set ModCloud  = cloud/acm_ae6         #> cloud chemistry module (see $CMAQ_HOME/CCTM/src/cloud)
 set ModUtil   = util/util             #> CCTM utility modules
 set Tracer    = trac0                 #> tracer configuration directory under $CMAQ_HOME/CCTM/src/MECHS [ default: no tracer species ]
 set ModPa     = procan/pa             #> name of process analysis include file directory under $CMAQ_HOME/CCTM/src/ICL
 set ModPvO3   = pv_o3                 #> potential vorticity from the free troposphee

#======================================#>
#> Computing System Configuration:
#>    Most of these settings are done in config.cmaq
#======================================#>

 set FC = ${myFC}                      #> path of Fortan compiler; set in config.cmaq
 set FP = $FC                          #> path of Fortan preprocessor; set in config.cmaq
 set CC = ${myCC}                      #> path of C compiler; set in config.cmaq
 set BLDER = $CMAQ_HOME/UTIL/bldmake/src/BLDMAKE #> location of model builder executable

#> Libraries/include files
 set LIOAPI   = "${IOAPI_DIR}/lib ${ioapi_lib}"      #> I/O API library directory
 set IOAPIMOD = "${IOAPI_DIR}/include"               #> I/O API module directory
 set NETCDF   = "${NETCDF_DIR}/lib ${netcdf_lib}"    #> netCDF library directory
 set PNETCDF  = "${PNETCDF_DIR}/lib ${pnetcdf_lib}"  #> Parallel netCDF library directory
 set PIO_INC = "${IOAPI_DIR}/src"

#> Compiler flags set in config.cmaq
 set FSTD       = "${myFSTD}"
 set DBG        = "${myDBG}"
 set F_FLAGS    = "${myFFLAGS}"  #> F77 flags
 set F90_FLAGS  = "${myFRFLAGS}" #> F90 flags
 set CPP_FLAGS  = "" #> Fortran preprocessor flags
 set C_FLAGS    = "${myCFLAGS} -DFLDMN -I" #> C flags
 set LINK_FLAGS = "${myLINK_FLAG}" # Link flags

#:#:#:#:#:#:#:#:#:#:#:# End of User Input Section :#:#:#:#:#:#:#:#:#:#:#:#:#

#> Check for CMAQ_HOME and CMAQ_LIB settings:
 if ( ! -e $CMAQ_HOME || ! -e $CMAQ_LIB ) then
    echo "   $CMAQ_HOME or $CMAQ_LIB directory not found"
    exit 1
 endif
 echo "    Model repository base path: $CMAQ_HOME"
 echo "                  library path: $CMAQ_LIB"

 set BLD_OS = `uname -s`        ## Script set up for Linux only 
 if ($BLD_OS != 'Linux') then
    echo "   $BLD_OS -> wrong bldit script for host!"
    exit 1
 endif
 
if ( $?build_twoway ) then
    set MakeFileOnly   # do not compile coupled model, only generate makefile
    set ModTwoway = twoway
 endif

 if ( $?build_parallel_io ) then
    if ( ! $?ParOpt ) then
       echo "*** ParOpt is not set: required for the build_parallel_io option"
       exit 1
    endif
    set PIO = ( -Dparallel_io )
 else
    set PIO = ""
 endif

 if ( $?ParOpt ) then      # Multiprocessor system configuration
    echo "   Parallel; set MPI flags"
    set ModStenex = STENEX/se
    set ModPario = PARIO
    set ModPar = par/mpi
    set PARIO = ${REPOROOT}/PARIO
    set STENEX = ${REPOROOT}/STENEX
    # MPI_INC is set in config.cmaq
 #   set PIO_INC = "${IOAPI_DIR}/src/fixed_src"
    set PAR = ( -Dparallel )
    set Popt = SE
    set seL = se_snl
    set LIB2 = "${ioapi_lib}"
    set LIB3 = "${mpi_lib} ${extra_lib}"
    set Str1 = (// Parallel / Include message passing definitions)
    set Str2 = (include SUBST_MPI mpif.h;)
 else
    echo "   Not Parallel; set Serial (no-op) flags"
    set ModStenex = STENEX/noop
    set ModPar = par/par_noop
    set PARIO = "."
    set STENEX = ${REPOROOT}/STENEX/noop
    set MPI_INC = "."
 #   set PIO_INC = "."
    set PAR = ""
    set Popt = NOOP
    set seL = sef90_noop
    set LIB2 = "${ioapi_lib} ${extra_lib}"
    set Str1 =
    set Str2 =
 endif 
 
#> Mechanism location
 set ModMech = MECHS/$Mechanism        #> chemical mechanism module

#> Gas-phase chemistry solver options
 if ( $Mechanism == saprc07tic_ae6i_aqkmti ) then
    set ModGas = gas/ebi_saprc07tic_ae6i_aq
 endif

#> free trop. O3 potential vorticity scaling
 if ( $?potvortO3 ) then 
    set POT = ( -Dpotvorto3 )
 else
    set POT = ""
 endif 

#> Set and create the "BLD" directory for checking out and compiling source code
 set Bld = $Base/BLD_CCTM_${APPL}
 if ( ! -e "$Bld" ) then
    mkdir $Bld
 else
    if ( ! -d "$Bld" ) then
       echo "   *** target exists, but not a directory ***"
       exit 1
    endif
 endif
 cd $Bld

 set ICL_PAR   = $GlobInc/fixed/mpi
 set ICL_CONST = $GlobInc/fixed/const
 set ICL_FILES = $GlobInc/fixed/filenames
 set ICL_EMCTL = $GlobInc/fixed/emctrl
# set ICL_PA    = $GlobInc/procan/$PAOpt

 if ( $?CopySrc ) then
    /bin/cp -fp ${ICL_PAR}/*   ${Bld}
    /bin/cp -fp ${ICL_CONST}/* ${Bld}
    /bin/cp -fp ${ICL_FILES}/* ${Bld}
    /bin/cp -fp ${ICL_EMCTL}/* ${Bld}
#    /bin/cp -fp ${ICL_PA}/*    ${Bld}
 endif

 set ICL_PAR   = .
 set ICL_CONST = .
 set ICL_FILES = .
 set ICL_EMCTL = .
# set ICL_PA    = .

 set STX1 = ( -DSUBST_BARRIER=${Popt}_BARRIER\
              -DSUBST_GLOBAL_MAX=${Popt}_GLOBAL_MAX\
              -DSUBST_GLOBAL_MIN=${Popt}_GLOBAL_MIN\
              -DSUBST_GLOBAL_MIN_DATA=${Popt}_GLOBAL_MIN_DATA\
              -DSUBST_GLOBAL_TO_LOCAL_COORD=${Popt}_GLOBAL_TO_LOCAL_COORD\
              -DSUBST_GLOBAL_SUM=${Popt}_GLOBAL_SUM\
              -DSUBST_GLOBAL_LOGICAL=${Popt}_GLOBAL_LOGICAL\
              -DSUBST_LOOP_INDEX=${Popt}_LOOP_INDEX\
              -DSUBST_SUBGRID_INDEX=${Popt}_SUBGRID_INDEX )
 set STX2 = ( -DSUBST_HI_LO_BND_PE=${Popt}_HI_LO_BND_PE\
              -DSUBST_SUM_CHK=${Popt}_SUM_CHK\
              -DSUBST_INIT_ARRAY=${Popt}_INIT_ARRAY\
              -DSUBST_COMM=${Popt}_COMM\
              -DSUBST_MY_REGION=${Popt}_MY_REGION\
              -DSUBST_SLICE=${Popt}_SLICE\
              -DSUBST_GATHER=${Popt}_GATHER\
              -DSUBST_DATA_COPY=${Popt}_DATA_COPY\
              -DSUBST_IN_SYN=${Popt}_IN_SYN )

#> make the config file

 set Cfile = ${CFG}.bld
 set quote = '"'

 echo                                                               > $Cfile
 echo "model       $EXEC;"                                         >> $Cfile
 echo                                                              >> $Cfile
 echo "repo        $REPOROOT;"                                     >> $Cfile
 echo                                                              >> $Cfile
 echo "mechanism   $Mechanism;"                                    >> $Cfile
 echo                                                              >> $Cfile
 echo "lib_base    $CMAQ_LIB;"                                     >> $Cfile
 echo                                                              >> $Cfile
 echo "lib_1       ioapi/lib;"                                     >> $Cfile
 echo                                                              >> $Cfile
 echo "lib_2       ioapi/src;"                                     >> $Cfile
 echo                                                              >> $Cfile
 if ( $?ParOpt ) then
    echo "lib_3       ${quote}mpi/include -I.$quote;"               >> $Cfile
    echo                                                           >> $Cfile
 endif
 set text = "$quote$CPP_FLAGS $PAR $POT $STX1 $STX2$quote;"
 echo "cpp_flags   $text"                                          >> $Cfile
 echo                                                              >> $Cfile
 echo "f_compiler  $FC;"                                           >> $Cfile
 echo                                                              >> $Cfile
 echo "fstd        $quote$FSTD$quote;"                             >> $Cfile
 echo                                                              >> $Cfile
 echo "dbg         $quote$DBG$quote;"                              >> $Cfile
 echo                                                              >> $Cfile
 echo "f_flags     $quote$F_FLAGS$quote;"                          >> $Cfile
 echo                                                              >> $Cfile
 echo "f90_flags   $quote$F90_FLAGS$quote;"                        >> $Cfile
 echo                                                              >> $Cfile
 echo "c_compiler  $CC;"                                           >> $Cfile
 echo                                                              >> $Cfile
 echo "c_flags     $quote$C_FLAGS$quote;"                          >> $Cfile
 echo                                                              >> $Cfile
 echo "link_flags  $quote$LINK_FLAGS$quote;"                       >> $Cfile
 echo                                                              >> $Cfile
 echo "ioapi       $quote$LIB2$quote;     "                        >> $Cfile
 echo                                                              >> $Cfile
 echo "netcdf      $quote$netcdf_lib$quote;"                       >> $Cfile
 echo                                                              >> $Cfile
 if ( $?ParOpt ) then
    echo "mpich       $quote$LIB3$quote;"                       >> $Cfile
    echo                                                           >> $Cfile
 endif
 echo "include SUBST_PE_COMM    $ICL_PAR/PE_COMM.EXT;"             >> $Cfile
 echo "include SUBST_CONST      $ICL_CONST/CONST.EXT;"             >> $Cfile
 echo "include SUBST_FILES_ID   $ICL_FILES/FILES_CTM.EXT;"         >> $Cfile
 echo "include SUBST_EMISPRM    $ICL_EMCTL/EMISPRM.EXT;"           >> $Cfile
 echo                                                              >> $Cfile

 if ( $?ParOpt ) then
    echo "$Str1"                                                   >> $Cfile
    echo "include SUBST_MPI        ./mpif.h;"                      >> $Cfile
 endif
 echo                                                              >> $Cfile

 set text = "stenex or se_noop"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModStenex};"                                       >> $Cfile
 if ( $?ParOpt ) then
    set text = "// parallel executable; stenex and pario included"
    echo $text                                                     >> $Cfile
    echo "Module ${ModPario};"                                     >> $Cfile
 else
    set text = "serial executable; noop stenex"
    echo $text                                                     >> $Cfile
 endif
 echo                                                              >> $Cfile

 set text = "par, par_nodistr and par_noop"
 echo "// options are" $text                                       >> $Cfile
 if ( $?ParOpt ) then
    echo "Module ${ModPar};"                                       >> $Cfile
 endif
 echo                                                              >> $Cfile

 if ( $?build_twoway ) then
    echo "// option set for WRF-CMAQ twoway"                       >> $Cfile
    echo "Module ${ModTwoway};"                                    >> $Cfile
    echo                                                           >> $Cfile
 endif

 set text = "wrf and yamo"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModDriver};"                                       >> $Cfile
 echo                                                              >> $Cfile

 set text = "cartesian"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModGrid};"                                         >> $Cfile
 echo                                                              >> $Cfile

 set text = "yamo"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModInit};"                                         >> $Cfile
 echo                                                              >> $Cfile

 set text = "gencoor_wrf and gencoor"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModCpl};"                                          >> $Cfile
 echo                                                              >> $Cfile

 set text = "yamo"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModHadv};"                                         >> $Cfile
 echo                                                              >> $Cfile

 set text = "wrf and yamo"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModVadv};"                                         >> $Cfile
 echo                                                              >> $Cfile

 set text = "multiscale"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModHdiff};"                                        >> $Cfile
 echo                                                              >> $Cfile

 set text = "acm2"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModVdiff};"                                        >> $Cfile
 echo                                                              >> $Cfile

 set text = "m3dry"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModDepv};"                                         >> $Cfile
 echo                                                              >> $Cfile

 set text = "emis"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModEmis};"                                         >> $Cfile
 echo                                                              >> $Cfile

 set text = "beis3"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModBiog};"                                         >> $Cfile
 echo                                                              >> $Cfile

 set text = "smoke"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModPlmrs};"                                        >> $Cfile
 echo                                                              >> $Cfile

 set text = "cgrid_spcs_nml and cgrid_spcs_icl"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModCgrds};"                                        >> $Cfile
 echo                                                              >> $Cfile

 set text = "inline and table"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModPhot};"                                         >> $Cfile
 echo                                                              >> $Cfile

 set text = "gas chemistry solvers"
 echo "// " $text                                                  >> $Cfile
 set text = "smvgear, ros3, and ebi_<mech>; see 'gas chemistry mechanisms' for <mech>"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModGas};"                                          >> $Cfile
 echo                                                              >> $Cfile

 set MechList = " cb05e51_ae6_aq, cb05e51_ae6nvPOA_aq, cb05eh51_ae6_aq, cb05mp51_ae6_aq, cb05tucl_ae6_aq, cb05tump_ae6_aq, cb6r3_ae6_aq, cb6r3_ae6nvPOA_aq, racm2_ae6_aq, saprc07tb_ae6_aq, saprc07tc_ae6_aq, saprc07tc_ae6nvPOA_aq, saprc07tic_ae6i_aq, saprc07tic_ae6i_aqkmti, saprc07tic_ae6invPOA_aq"

 set text = "gas chemistry mechanisms"
 echo "// " $text                                                  >> $Cfile
 set text = "$MechList"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModMech};"                                         >> $Cfile
 echo                                                              >> $Cfile

 if ( $?potvortO3 ) then
    set text = "use potential vorticity free-troposphere O3 scaling"
    echo "// options are" $text                                    >> $Cfile
    echo "Module ${ModPvO3};"                                      >> $Cfile
    echo                                                           >> $Cfile
 endif

 set text = "aero6"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModAero};"                                         >> $Cfile
 echo                                                              >> $Cfile

 set text = "acm_ae6, acm_ae6_kmt, and acm_ae6_mp"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModCloud};"                                        >> $Cfile
 echo                                                              >> $Cfile

 set text = "// compile for inline process analysis"
 echo $text                                                        >> $Cfile
 echo "Module ${ModPa};"                                           >> $Cfile
 echo                                                              >> $Cfile

 set text = "util"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModUtil};"                                         >> $Cfile
 echo                                                              >> $Cfile

 if ( $?ModMisc ) then
    echo "Module ${ModMisc};"                                      >> $Cfile
    echo                                                           >> $Cfile
 endif

#> make the Makefile or the model executable

 unalias mv rm
 
 if ( $?ParOpt ) then
    set Blder = "$BLDER -verbose"
 else
    set Blder = "$BLDER -serial -verbose"
 endif

 if ( $?MakeFileOnly ) then
    if ( $?CopySrc ) then
       $Blder -makefo $Cfile
    else
       $Blder -makefo -git_local $Cfile   # $Cfile = ${CFG}.bld
    endif
 else   # also compile the model
    if ( $?CopySrc ) then
       $Blder $Cfile
    else
       $Blder -git_local $Cfile
    endif
 endif
 mv Makefile $Bld/Makefile.$compiler
 if ( -e $Bld/Makefile.$compiler && -e $Bld/Makefile ) rm $Bld/Makefile
 ln -s ./Makefile.$compiler Makefile

 if ( $status != 0 ) then
    echo "   *** failure in $Blder ***"
    exit 1
 endif
 if ( -e "$Base/${CFG}" ) then
    echo "   >>> previous ${CFG} exists, re-naming to ${CFG}.old <<<"
    mv $Base/${CFG} $Base/${CFG}.old
 endif
 mv ${CFG}.bld $Bld/${CFG}

#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#

exit
